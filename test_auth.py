import os
import asyncio
import hashlib
import json
from pathlib import Path
from dotenv import load_dotenv, set_key
from telethon.sessions import StringSession
from opentele.td import TDesktop
from opentele.api import API, UseCurrentSession
from tdata_session_exporter import authorize_client
from tdata_session_exporter.auth import get_proxy

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TELEGRAM_SESSION_ENV_KEY = "TELEGRAM_SESSION"
SESSION_PATH = os.getenv("TDATA_PATH", "tdatas/tdata/")

async def extract_session_from_tdata():
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å–µ—Å—Å–∏–∏ –∏–∑ tdata –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ .env"""
    print(f"üîÑ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏–∑ {SESSION_PATH}...")
    
    if not os.path.isdir(SESSION_PATH):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {SESSION_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—É–Ω–∏—è –≤ —Ö–µ—à–µ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        proxy_conn = get_proxy()
        
        # –°–æ–∑–¥–∞–µ–º —Ö–µ—à –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏
        session_hash = hashlib.md5(json.dumps(proxy_conn or {}, sort_keys=True).encode()).hexdigest()[:8]
        session_dir = Path("sessions")
        session_dir.mkdir(exist_ok=True)
        session_file = f"sessions/extract_test_{session_hash}.session"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TDesktop –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        tdesk = TDesktop(SESSION_PATH)
        if not tdesk.accounts:
            print("‚ùå –ê–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ tdata")
            return False
        
        # –°–æ–∑–¥–∞–µ–º Telethon –∫–ª–∏–µ–Ω—Ç –∏–∑ tdata
        client = await tdesk.ToTelethon(
            session_file,
            UseCurrentSession,
            api=API.TelegramIOS.Generate(),
            proxy=proxy_conn
        )
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∏ –ø–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å–µ—Å—Å–∏–∏
        await client.connect()
        me = await client.get_me()
        print(f"‚úÖ –°–µ—Å—Å–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∞ –¥–ª—è: {me.first_name} (@{me.username})")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É —Å–µ—Å—Å–∏–∏ –≤ .env
        string_session = StringSession.save(client.session)
        set_key(".env", TELEGRAM_SESSION_ENV_KEY, string_session)
        print("üíæ –°—Ç—Ä–æ–∫–∞ —Å–µ—Å—Å–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ .env")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        await client.disconnect()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
        return False

async def test_authorization():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏"""
    print("\nüîë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ TELEGRAM_SESSION...")
    
    client = await authorize_client()
    if client and client.me:
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–∞–∫: {client.me.first_name} (@{client.me.username})")
        proxy_status = "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è" if client.proxy_conn else "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"
        print(f"üì° –ü—Ä–æ–∫—Å–∏: {proxy_status}")
        await client.client.disconnect()
        return True
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏, –∑–∞—Ç–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"""
    print("üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ -> –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
    
    # –®–∞–≥ 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏–∑ tdata
    extraction_success = await extract_session_from_tdata()
    if not extraction_success:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å–µ—Å—Å–∏—é, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ")
        return
    
    # –®–∞–≥ 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
    auth_success = await test_authorization()
    
    # –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if extraction_success and auth_success:
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ! –û–±–∞ —ç—Ç–∞–ø–∞ –ø—Ä–æ–π–¥–µ–Ω—ã.")
    else:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏.")

if __name__ == "__main__":
    asyncio.run(main())
