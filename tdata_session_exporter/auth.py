import asyncio
import logging
import os
import hashlib
import json
from pathlib import Path
from telethon.sessions import StringSession
from telethon.sync import TelegramClient
from opentele.td import TDesktop
from opentele.api import API, UseCurrentSession
from dotenv import set_key, load_dotenv
from opentele.exception import TFileNotFound

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–ª—é—á –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è, –≥–¥–µ –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è —Å—Ç—Ä–æ–∫–∞ —Å–µ—Å—Å–∏–∏
TELEGRAM_SESSION_ENV_KEY = "TELEGRAM_SESSION"
TELEGRAM_SESSION = os.getenv(TELEGRAM_SESSION_ENV_KEY, None)

# –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ tdata
SESSION_PATH = os.getenv("TDATA_PATH", "tdatas/tdata/")

def get_proxy():
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–∫—Å–∏-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"""
    proxy_type = os.getenv("PROXY_TYPE")
    proxy_host = os.getenv("PROXY_HOST")
    proxy_port = os.getenv("PROXY_PORT")
    proxy_username = os.getenv("PROXY_USERNAME")
    proxy_password = os.getenv("PROXY_PASSWORD")
    
    if not (proxy_type and proxy_host and proxy_port):
        return None
    
    proxy_conn = {
        'proxy_type': proxy_type,
        'addr': proxy_host,
        'port': int(proxy_port),
    }
    
    if proxy_username and proxy_password:
        proxy_conn.update({
            'username': proxy_username,
            'password': proxy_password
        })
    
    return proxy_conn

class MyTelegramClient:
    def __init__(self, tdata_name=None):
        self.tdata_name = tdata_name
        self.client = None
        self.me = None
        self.proxy_conn = get_proxy()

    async def authorize(self):
        session_hash = hashlib.md5(json.dumps(self.proxy_conn or {}, sort_keys=True).encode()).hexdigest()[:8]
        session_dir = Path("sessions")
        session_dir.mkdir(exist_ok=True)
        
        if self.tdata_name:
            session_file = f"sessions/{self.tdata_name}_{session_hash}.session"
        else:
            session_file = f"sessions/tg_monitor_{session_hash}.session"

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ TELEGRAM_SESSION –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if TELEGRAM_SESSION:
            logger.info("üîë –ò—Å–ø–æ–ª—å–∑—É—é TELEGRAM_SESSION –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telethon.")
            try:
                api = API.TelegramIOS.Generate()
                self.client = TelegramClient(StringSession(TELEGRAM_SESSION), api.api_id, api.api_hash, proxy=self.proxy_conn)
                await self.client.start()
                self.me = await self.client.get_me()
                logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫–∞–∫: {self.me.first_name} (@{self.me.username}) [TELEGRAM_SESSION]")
                return True
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ TELEGRAM_SESSION: {e}")
                logger.info("üîÑ –ü—Ä–æ–±—É—é –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ tdata...")
                # –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False, –∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—ã—Ç–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ tdata
        
        # –ï—Å–ª–∏ –Ω–µ—Ç TELEGRAM_SESSION –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –Ω–µ–≥–æ –Ω–µ —É–¥–∞–ª–∞—Å—å,
        # –ø—Ä–æ–±—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ tdata
        if os.path.isdir(SESSION_PATH):
            logger.info(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É—é tdata –∏–∑ {SESSION_PATH} –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
            try:
                tdesk = TDesktop(SESSION_PATH)
                if not tdesk.accounts:
                    logger.error("‚ùå –ê–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ tdata")
                    return False
                
                os.makedirs(os.path.dirname(session_file), exist_ok=True)
                self.client = await tdesk.ToTelethon(
                    session_file, 
                    UseCurrentSession,
                    api=API.TelegramIOS.Generate(),
                    proxy=self.proxy_conn
                )
                await self.client.connect()
                self.me = await self.client.get_me()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É —Å–µ—Å—Å–∏–∏ –≤ .env –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                string_session = StringSession.save(self.client.session)
                set_key(".env", TELEGRAM_SESSION_ENV_KEY, string_session)
                
                logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫–∞–∫: {self.me.first_name} (@{self.me.username}) [tdata]")
                logger.info("–°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ .env")
                return True
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ tdata: {e}")
                return False
        else:
            logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ TELEGRAM_SESSION, –Ω–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è tdata. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
            return False


async def authorize_client(tdata_name=None):
    client = MyTelegramClient(tdata_name)
    result = await client.authorize()
    if result:
        return client
    else:
        return None
