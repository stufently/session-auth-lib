import asyncio
import logging
import os
import hashlib
import time
import json
from pathlib import Path
from telethon.sessions import StringSession
from telethon.sync import TelegramClient
from opentele.td import TDesktop
from opentele.api import API, UseCurrentSession
from dotenv import set_key, load_dotenv
from opentele.exception import TFileNotFound

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger()
# –£–º–µ–Ω—å—à–∞–µ–º –±–æ–ª—Ç–ª–∏–≤–æ—Å—Ç—å Telethon
logging.getLogger("telethon").setLevel(logging.WARNING)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–ª—é—á –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è, –≥–¥–µ –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è —Å—Ç—Ä–æ–∫–∞ —Å–µ—Å—Å–∏–∏
TELEGRAM_SESSION_ENV_KEY = "TELEGRAM_SESSION"
TELEGRAM_SESSION = os.getenv(TELEGRAM_SESSION_ENV_KEY, None)
# –ü—É—Ç—å –∫ JSON –±–∞–Ω–¥–ª–∞ (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω) ‚Äî JSON + —Å–æ—Å–µ–¥–Ω–∏–π .session
BUNDLE_JSON_PATH = os.getenv("BUNDLE_JSON_PATH")

# –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ tdata
SESSION_PATH = os.getenv("TDATA_PATH", "tdatas/tdata/")


def _load_bundle_config(json_path: str):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç JSON –±–∞–Ω–¥–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (cfg, session_path_no_ext)."""
    with open(json_path, 'r', encoding='utf-8') as f:
        cfg = json.load(f)

    api_id = cfg.get('app_id') or cfg.get('api_id')
    api_hash = cfg.get('app_hash')
    if not api_id or not api_hash:
        raise ValueError('–í JSON –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç app_id/app_hash')

    session_file = cfg.get('session_file')
    if not session_file:
        # –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è JSON
        session_file = os.path.splitext(os.path.basename(json_path))[0]

    session_basename = os.path.splitext(session_file)[0]
    base_dir = os.path.dirname(os.path.abspath(json_path))
    session_path_no_ext = os.path.join(base_dir, session_basename)

    cfg['app_id'] = int(api_id)
    cfg['app_hash'] = str(api_hash)
    cfg['session_file'] = session_basename
    return cfg, session_path_no_ext

def get_proxy():
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–∫—Å–∏-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"""
    proxy_type = os.getenv("PROXY_TYPE")
    proxy_host = os.getenv("PROXY_HOST")
    proxy_port = os.getenv("PROXY_PORT")
    proxy_username = os.getenv("PROXY_USERNAME")
    proxy_password = os.getenv("PROXY_PASSWORD")
    
    if not (proxy_type and proxy_host and proxy_port):
        return None
    
    proxy_conn = {
        'proxy_type': proxy_type,
        'addr': proxy_host,
        'port': int(proxy_port),
    }
    
    if proxy_username and proxy_password:
        proxy_conn.update({
            'username': proxy_username,
            'password': proxy_password
        })
    
    return proxy_conn

class MyTelegramClient:
    def __init__(self, tdata_name=None, bundle_json: str = None, tdata_path: str = None):
        self.tdata_name = tdata_name
        self.bundle_json = bundle_json or BUNDLE_JSON_PATH
        self.tdata_path_override = tdata_path
        self.client = None
        self.me = None
        self.proxy_conn = get_proxy()

    async def authorize(self):
        session_hash = hashlib.md5(json.dumps(self.proxy_conn or {}, sort_keys=True).encode()).hexdigest()[:8]
        session_dir = Path("sessions")
        session_dir.mkdir(exist_ok=True)
        
        if self.tdata_name:
            session_file = f"sessions/{self.tdata_name}_{session_hash}.session"
        else:
            session_file = f"sessions/tg_monitor_{session_hash}.session"

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ TELEGRAM_SESSION –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if TELEGRAM_SESSION:
            logger.info("üîë –ò—Å–ø–æ–ª—å–∑—É—é TELEGRAM_SESSION –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telethon.")
            try:
                api = API.TelegramIOS.Generate()
                self.client = TelegramClient(StringSession(TELEGRAM_SESSION), api.api_id, api.api_hash, proxy=self.proxy_conn)
                await self.client.start()
                self.me = await self.client.get_me()
                logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫–∞–∫: {self.me.first_name} (@{self.me.username}) [TELEGRAM_SESSION]")
                return True
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ TELEGRAM_SESSION: {e}")
                logger.info("üîÑ –ü—Ä–æ–±—É—é –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ tdata...")
                # –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False, –∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—ã—Ç–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ tdata

        # –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ –±–∞–Ω–¥–ª–∞ JSON+.session
        if self.bundle_json and os.path.exists(self.bundle_json):
            try:
                cfg, session_path_no_ext = _load_bundle_config(self.bundle_json)
                logger.info(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É—é –±–∞–Ω–¥–ª JSON+.session: {self.bundle_json}")
                self.client = TelegramClient(session_path_no_ext, cfg['app_id'], cfg['app_hash'], proxy=self.proxy_conn)
                async with self.client:
                    if not await self.client.is_user_authorized():
                        logger.error("‚ùå –°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω–∞ [bundle]")
                        return False
                    self.me = await self.client.get_me()
                    string_session = StringSession.save(self.client.session)
                    set_key(".env", TELEGRAM_SESSION_ENV_KEY, string_session)
                    logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫–∞–∫: {self.me.first_name} (@{self.me.username}) [bundle]")
                    return True
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ bundle: {e}")
                # –ü–∞–¥–∞—Ç—å –Ω–µ –±—É–¥–µ–º ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º tdata
        
        # –ï—Å–ª–∏ –Ω–µ—Ç TELEGRAM_SESSION –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –Ω–µ–≥–æ –Ω–µ —É–¥–∞–ª–∞—Å—å,
        # –ø—Ä–æ–±—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ tdata
        tdata_path = self.tdata_path_override or SESSION_PATH
        if os.path.isdir(tdata_path):
            logger.info(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É—é tdata –∏–∑ {tdata_path} –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
            try:
                tdesk = TDesktop(tdata_path)
                if not tdesk.accounts:
                    logger.error("‚ùå –ê–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ tdata")
                    return False
                
                os.makedirs(os.path.dirname(session_file), exist_ok=True)
                self.client = await tdesk.ToTelethon(
                    session_file, 
                    UseCurrentSession,
                    api=API.TelegramIOS.Generate(),
                    proxy=self.proxy_conn
                )
                await self.client.connect()
                self.me = await self.client.get_me()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É —Å–µ—Å—Å–∏–∏ –≤ .env –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                string_session = StringSession.save(self.client.session)
                set_key(".env", TELEGRAM_SESSION_ENV_KEY, string_session)
                
                logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫–∞–∫: {self.me.first_name} (@{self.me.username}) [tdata]")
                logger.info("–°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ .env")
                return True
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ tdata: {e}")
                return False
        else:
            logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ TELEGRAM_SESSION, –Ω–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è tdata. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
            return False


async def authorize_client(tdata_name=None):
    client = MyTelegramClient(tdata_name)
    result = await client.authorize()
    if result:
        return client
    else:
        return None


def _derive_basename_from_tdata(tdata_path: str) -> str:
    # –ï—Å–ª–∏ –ø—É—Ç—å –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ /tdata, –±–µ—Ä—ë–º –∏–º—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –∏–Ω–∞—á–µ —Å–∞–º basename
    base = os.path.basename(os.path.normpath(tdata_path))
    if base.lower() == 'tdata':
        return os.path.basename(os.path.dirname(os.path.normpath(tdata_path))) or 'account'
    return base or 'account'


def _default_accounts_dir() -> str:
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–∑–¥–∞—ë–º –≤ <cwd>/accounts
    return os.path.join(os.getcwd(), 'accounts')


async def export_bundle_from_tdata(tdata_path: str, out_dir: str, basename: str,
                                   api_id: int = None, api_hash: str = None) -> bool:
    """
    –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏–∑ –ø–∞–ø–∫–∏ tdata –ø–∞—Ä—É —Ñ–∞–π–ª–æ–≤: <basename>.session –∏ <basename>.json –≤ out_dir.
    –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–ª—é—á–∏ Telegram Desktop (2040/b184...).
    """
    if not os.path.isdir(tdata_path):
        logger.error(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è tdata –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {tdata_path}")
        return False

    os.makedirs(out_dir, exist_ok=True)

    try:
        tdesk = TDesktop(tdata_path)
        if not tdesk.accounts:
            logger.error("‚ùå –ê–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ tdata")
            return False
    except TFileNotFound as e:
        logger.error(f"‚ùå TFileNotFound: {e}")
        return False

    session_path = os.path.join(out_dir, f"{basename}.session")
    json_path = os.path.join(out_dir, f"{basename}.json")

    if not api_id or not api_hash:
        api_id = 2040
        api_hash = "b18441a1ff607e10a989891a5462e627"

    # opentele –æ–∂–∏–¥–∞–µ—Ç –∫–ª–∞—Å—Å API, –ø–æ—ç—Ç–æ–º—É —Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∫–ª–∞—Å—Å
    CustomAPI = type(
        "CustomAPI",
        (API,),
        {
            "api_id": int(api_id),
            "api_hash": str(api_hash),
        },
    )

    try:
        logger.info(f"üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Telethon .session –∏–∑ tdata ‚Üí {session_path}")
        client = await tdesk.ToTelethon(
            session_path,
            UseCurrentSession,
            api=CustomAPI,
            auto_reconnect=False
        )
        async with client:
            me = await client.get_me()

        cfg = {
            "app_id": int(CustomAPI.api_id),
            "app_hash": str(CustomAPI.api_hash),
            "device": "tdata-export",
            "sdk": "unknown",
            "app_version": "unknown",
            "system_lang_pack": "en",
            "system_lang_code": "en",
            "lang_pack": "tdesktop",
            "lang_code": "en",
            "twoFA": None,
            "role": "",
            "id": getattr(me, 'id', None) if me else None,
            "phone": None,
            "username": getattr(me, 'username', None) if me else None,
            "date_of_birth": None,
            "date_of_birth_integrity": None,
            "is_premium": bool(getattr(me, 'premium', False)) if me else False,
            "has_profile_pic": bool(getattr(me, 'photo', None)) if me else False,
            "spamblock": None,
            "register_time": None,
            "last_check_time": int(time.time()),
            "avatar": None,
            "first_name": getattr(me, 'first_name', "") if me else "",
            "last_name": getattr(me, 'last_name', "") if me else "",
            "sex": None,
            "proxy": None,
            "ipv6": False,
            "session_file": basename
        }
        with open(json_path, "w", encoding="utf-8") as f:
            json.dump(cfg, f, ensure_ascii=False)

        logger.info(f"‚úÖ –ë–∞–Ω–¥–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {json_path} –∏ {session_path}")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –±–∞–Ω–¥–ª–∞ –∏–∑ tdata: {e}")
        return False


def export_bundle_from_tdata_auto(tdata_path: str,
                                  out_base_dir: str = None,
                                  api_id: int = None,
                                  api_hash: str = None) -> bool:
    """
    –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç: –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—É—Ç—å –∫ tdata.
    –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ö—Ä–∞–Ω–∏—Ç –≤ <cwd>/accounts/<basename>/{basename}.session –∏ .json,
    –≥–¥–µ basename ‚Äî —ç—Ç–æ –∏–º—è –ø–∞–ø–∫–∏ —Ä–æ–¥–∏—Ç–µ–ª—è –Ω–∞–¥ tdata (–Ω–∞–ø—Ä–∏–º–µ—Ä, "+2349049675164").
    """
    basename = _derive_basename_from_tdata(tdata_path)
    base_dir = out_base_dir or _default_accounts_dir()
    out_dir = os.path.join(base_dir, basename)
    return asyncio.run(export_bundle_from_tdata(tdata_path, out_dir, basename, api_id, api_hash))


def export_bundle_from_tdata_sync(tdata_path: str, out_dir: str, basename: str,
                                  api_id: int = None, api_hash: str = None) -> bool:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ export_bundle_from_tdata."""
    return asyncio.run(export_bundle_from_tdata(tdata_path, out_dir, basename, api_id, api_hash))
